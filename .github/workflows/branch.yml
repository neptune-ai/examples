name: examples-branch
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  get-notebooks:
    runs-on: ubuntu-latest
    outputs:
      changed_notebooks: ${{ steps.output.outputs.changed_notebooks }}
    steps:
    - uses: actions/checkout@v2
    - name: Get changed notebooks
      id: changed-notebooks
      uses: tj-actions/changed-files@v23.1
      with:
        separator: "', '"
        files: |
          **/*.ipynb
    - name: List all changed notebooks
      id: output
      if: steps.changed-notebooks.outputs.any_changed == 'true'
      run: |
        echo "[ '${{ steps.changed-notebooks.outputs.all_changed_files }}' ]"
        echo "::set-output name=changed_notebooks::[ '${{ steps.changed-notebooks.outputs.all_changed_files }}' ]"
  test-notebooks:
    needs: get-notebooks
    if: ${{needs.get-notebooks.outputs.changed_notebooks}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
        notebooks: ${{needs.get-notebooks.outputs.changed_notebooks}}
    env:
      NOTEBOOK_TO_TEST: ${{ matrix.notebooks }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.os }}-${{ matrix.python-version }}-pip
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-pip
      - name: Install OpenMP on MacOS for XGBoost integration
        if: runner.os == 'macOS'
        run: brew install libomp
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test examples
        run: ipython ${NOTEBOOK_TO_TEST}
  # test-scripts:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ ubuntu-latest, windows-latest, macos-latest ]
  #       python-version: [ '3.7', '3.8', '3.9', '3.10' ]
  #       scripts:
  #         - how-to-guides/hello-world/scripts
  #         - how-to-guides/hello-world/scripts
  #         - how-to-guides/how-it-works/scripts
  #         - how-to-guides/monitor-ml-runs/scripts
  #         - how-to-guides/organize-ml-experimentation/scripts
  #         - integrations-and-supported-tools/matplotlib/scripts
  #         - integrations-and-supported-tools/sklearn/scripts
  #         - integrations-and-supported-tools/tensorflow-keras/scripts
  #         - integrations-and-supported-tools/catalyst/scripts
  #         - integrations-and-supported-tools/lightgbm/scripts
  #         - integrations-and-supported-tools/xgboost/scripts
  #         - integrations-and-supported-tools/pytorch-lightning/scripts
  #         - integrations-and-supported-tools/fastai/scripts
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Get pip cache dir
  #       id: pip-cache
  #       run: |
  #         echo "::set-output name=dir::$(pip cache dir)"
  #     - name: pip cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.pip-cache.outputs.dir }}
  #         key: ${{ matrix.os }}-${{ matrix.python-version }}-pip
  #         restore-keys: |
  #           ${{ matrix.os }}-${{ matrix.python-version }}-pip
  #     - name: Install OpenMP on MacOS for XGBoost integration
  #       if: runner.os == 'macOS'
  #       run: brew install libomp
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #     - name: Test examples
  #       working-directory: ${{ matrix.scripts }}
  #       run: bash ./run_examples.sh
  # test-docker-example:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: build docker container from Dockerfile
  #       run: docker build -f how-to-guides/neptune-docker/scripts/Dockerfile --tag neptune-docker .
  #     - name: run docker container
  #       run: docker run -e NEPTUNE_API_TOKEN="ANONYMOUS" neptune-docker
