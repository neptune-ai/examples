name: Adhoc tests
on:
  workflow_dispatch:
    inputs:
      path:
        description:
            "Path of the notebook/script to test, relative to the repo root.
            For scripts, this should be the path of the `scripts` folder"
        required: true
        type: string
      python_version:
        description: "Python version"
        required: true
        default: "3.10"
        type: choice
        options:
            - "3.8"
            - "3.9"
            - "3.10"
            - "3.11"
      os:
        description: "Windows/Ubuntu/MacOS"
        required: true
        default: "ubuntu-latest"
        type: choice
        options:
            - ubuntu-latest
            - macos-latest
            - windows-latest
jobs:
  run-tests:
      runs-on: ${{ inputs.os }}
      steps:
          - uses: actions/checkout@main
          - uses: actions/setup-python@main
            with:
              python-version: ${{ inputs.python_version }}
              cache: "pip"
          - name: Install OpenMP on MacOS for XGBoost integration
            if: runner.os == 'macOS'
            run: brew install libomp
          - name: Upgrade pip
            run: python -m pip install --upgrade pip
          - name: Test scripts
            if: endsWith(inputs.path, 'scripts')
            uses: nick-fields/retry@v3
            env:
                NEPTUNE_API_TOKEN: "ANONYMOUS"
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
            with:
                timeout_minutes: 60
                max_attempts: 2
                retry_on: timeout
                command: |
                    cd ${{ inputs.path }}
                    bash run_examples.sh
          - name: Test notebooks
            if: endsWith(inputs.path, '.ipynb')
            uses: nick-fields/retry@v3
            env:
                NEPTUNE_API_TOKEN: "ANONYMOUS"
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
            with:
                timeout_minutes: 60
                max_attempts: 2
                retry_on: timeout
                command: |
                    pip install -U -r requirements.txt
                    ipython ${{ inputs.path }}
